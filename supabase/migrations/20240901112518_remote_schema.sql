
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."meal" AS ENUM (
    'breakfast',
    'lunch',
    'dinner',
    'snack'
);

ALTER TYPE "public"."meal" OWNER TO "postgres";

CREATE TYPE "public"."role" AS ENUM (
    'admin',
    'user'
);

ALTER TYPE "public"."role" OWNER TO "postgres";

COMMENT ON TYPE "public"."role" IS 'user role';

-- It's safe and in some cases necessary to use a security definer attribute on trigger functions.
-- Trigger functions can only be called by table events.
-- see https://www.reddit.com/r/Supabase/comments/1aw1jqo/comment/kreut02
CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$
declare
  new_collection_id bigint;
begin
  insert into public.collections (name, "userId")
  values ('Collection for user ' || new.email, new.id)
  returning id into new_collection_id;

  insert into public.user_metadata (id, email, role, "collectionId")
  values (new.id, new.email, 'user', new_collection_id);

  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."collections" (
    "id" bigint NOT NULL,
    "name" character varying,
    "userId" "uuid"
);

ALTER TABLE "public"."collections" OWNER TO "postgres";

COMMENT ON TABLE "public"."collections" IS 'Collections of dishes for users to view and edit';

ALTER TABLE "public"."collections" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."collections_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."dishes" (
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "defaultPortion" real,
    "cookedWeight" real,
    "proteins" real,
    "fats" real,
    "carbs" real,
    "calories" real,
    "updatedAt" timestamp with time zone DEFAULT "now"(),
    "id" bigint NOT NULL,
    "name" "text",
    "hasIngredients" boolean DEFAULT false NOT NULL,
    "deleted" boolean DEFAULT false,
    "legacyId" "text",
    "test" boolean,
    "searchable" "tsvector" GENERATED ALWAYS AS (("to_tsvector"('"english"'::"regconfig", COALESCE("name", ''::"text")) || "to_tsvector"('"russian"'::"regconfig", COALESCE("name", ''::"text")))) STORED,
    "icon" "text" DEFAULT ''::"text",
    "collectionId" bigint
);

ALTER TABLE "public"."dishes" OWNER TO "postgres";

COMMENT ON COLUMN "public"."dishes"."collectionId" IS 'ref to collections';

CREATE TABLE IF NOT EXISTS "public"."ingredients" (
    "portion" real NOT NULL,
    "proteins" real NOT NULL,
    "fats" real NOT NULL,
    "carbs" real NOT NULL,
    "calories" real NOT NULL,
    "id" bigint NOT NULL,
    "dishId" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "parentDishId" bigint NOT NULL,
    "test" boolean
);

ALTER TABLE "public"."ingredients" OWNER TO "postgres";

COMMENT ON TABLE "public"."ingredients" IS 'Storing ingredients for dishes';

ALTER TABLE "public"."ingredients" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dishesIngredients_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."dishes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dishes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."eatings" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "day" "date" NOT NULL,
    "userId" "uuid" NOT NULL,
    "dishId" bigint,
    "portion" integer NOT NULL,
    "meal" "public"."meal" NOT NULL,
    "proteins" real NOT NULL,
    "fats" real NOT NULL,
    "carbs" real NOT NULL,
    "calories" real NOT NULL
);

ALTER TABLE "public"."eatings" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."eatings_by_day" WITH ("security_invoker"='on') AS
 SELECT "eatings"."userId",
    "eatings"."day",
    "sum"("eatings"."proteins") AS "proteins",
    "sum"("eatings"."fats") AS "fats",
    "sum"("eatings"."carbs") AS "carbs",
    "sum"("eatings"."calories") AS "calories"
   FROM "public"."eatings"
  GROUP BY "eatings"."day", "eatings"."userId";

ALTER TABLE "public"."eatings_by_day" OWNER TO "postgres";

ALTER TABLE "public"."eatings" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."eatings_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."settings" (
    "userId" "uuid" NOT NULL,
    "proteins" real NOT NULL,
    "fats" real NOT NULL,
    "carbs" real NOT NULL,
    "calories" real NOT NULL
);

ALTER TABLE "public"."settings" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_metadata" (
    "id" "uuid" NOT NULL,
    "role" "public"."role" DEFAULT 'user'::"public"."role" NOT NULL,
    "collectionId" bigint,
    "email" "text"
);

ALTER TABLE "public"."user_metadata" OWNER TO "postgres";

COMMENT ON TABLE "public"."user_metadata" IS 'Users metadata';

ALTER TABLE ONLY "public"."collections"
    ADD CONSTRAINT "collections_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "dishIngredients_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "dishesIngredients_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."dishes"
    ADD CONSTRAINT "dishes_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."dishes"
    ADD CONSTRAINT "dishes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."eatings"
    ADD CONSTRAINT "eatings_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."settings"
    ADD CONSTRAINT "settings_pkey" PRIMARY KEY ("userId");

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "uniqueingredient" UNIQUE ("dishId", "parentDishId");

ALTER TABLE ONLY "public"."user_metadata"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

CREATE INDEX "dishes_collectionId_idx" ON "public"."dishes" USING "btree" ("collectionId");

CREATE INDEX "dishes_searchable_idx" ON "public"."dishes" USING "gin" ("searchable");

ALTER TABLE ONLY "public"."collections"
    ADD CONSTRAINT "collections_userId_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."dishes"
    ADD CONSTRAINT "dishes_collectionId_fkey" FOREIGN KEY ("collectionId") REFERENCES "public"."collections"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "public_dishIngredients_dish_fkey" FOREIGN KEY ("dishId") REFERENCES "public"."dishes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "public_dishIngredients_ingredient_fkey" FOREIGN KEY ("parentDishId") REFERENCES "public"."dishes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."eatings"
    ADD CONSTRAINT "public_eatings_dishId_fkey" FOREIGN KEY ("dishId") REFERENCES "public"."dishes"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."eatings"
    ADD CONSTRAINT "public_eatings_userId_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."settings"
    ADD CONSTRAINT "public_settings_user_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_metadata"
    ADD CONSTRAINT "users_collectionId_fkey" FOREIGN KEY ("collectionId") REFERENCES "public"."collections"("id");

ALTER TABLE ONLY "public"."user_metadata"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable access for authenticated users only" ON "public"."ingredients" TO "authenticated" USING (true);

CREATE POLICY "User can READ only their own COLLECTION" ON "public"."collections" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userId"));

CREATE POLICY "User can READ only their own METADATA" ON "public"."user_metadata" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "User can do ALL only with their own EATINGS" ON "public"."eatings" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userId"));

CREATE POLICY "User can do ALL with DISHES only from their COLLECTION" ON "public"."dishes" TO "authenticated" USING (("collectionId" IN ( SELECT "u"."collectionId"
   FROM "public"."user_metadata" "u"
  WHERE ("u"."id" = ( SELECT "auth"."uid"() AS "uid")))));

CREATE POLICY "User can do ALL with only their own SETTINGS" ON "public"."settings" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userId"));

CREATE POLICY "Users can READ DISHES from shared COLLECTION" ON "public"."dishes" FOR SELECT TO "authenticated" USING (("collectionId" = 1));

ALTER TABLE "public"."collections" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."dishes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."eatings" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ingredients" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."settings" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_metadata" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."collections" TO "anon";
GRANT ALL ON TABLE "public"."collections" TO "authenticated";
GRANT ALL ON TABLE "public"."collections" TO "service_role";

GRANT ALL ON SEQUENCE "public"."collections_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."collections_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."collections_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."dishes" TO "anon";
GRANT ALL ON TABLE "public"."dishes" TO "authenticated";
GRANT ALL ON TABLE "public"."dishes" TO "service_role";

GRANT ALL ON TABLE "public"."ingredients" TO "anon";
GRANT ALL ON TABLE "public"."ingredients" TO "authenticated";
GRANT ALL ON TABLE "public"."ingredients" TO "service_role";

GRANT ALL ON SEQUENCE "public"."dishesIngredients_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dishesIngredients_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dishesIngredients_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."dishes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dishes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dishes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."eatings" TO "anon";
GRANT ALL ON TABLE "public"."eatings" TO "authenticated";
GRANT ALL ON TABLE "public"."eatings" TO "service_role";

GRANT ALL ON TABLE "public"."eatings_by_day" TO "anon";
GRANT ALL ON TABLE "public"."eatings_by_day" TO "authenticated";
GRANT ALL ON TABLE "public"."eatings_by_day" TO "service_role";

GRANT ALL ON SEQUENCE "public"."eatings_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."eatings_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."eatings_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."settings" TO "anon";
GRANT ALL ON TABLE "public"."settings" TO "authenticated";
GRANT ALL ON TABLE "public"."settings" TO "service_role";

GRANT ALL ON TABLE "public"."user_metadata" TO "anon";
GRANT ALL ON TABLE "public"."user_metadata" TO "authenticated";
GRANT ALL ON TABLE "public"."user_metadata" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
